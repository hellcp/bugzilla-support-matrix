
name: Install and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  install_and_test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        docker: ['debian', 'ubuntu', 'fedora']
        version: ['release-5.0-stable', '5.2', 'harmony']
        root: ['/var/www/html/bugzilla/']

    container: ${{ matrix.docker }}

    steps:
      - if: ${{ contains(matrix.docker, 'centos') }}
        name: Add epel to centos
        run: dnf -y config-manager --set-enabled powertools && dnf -y install epel-release epel-next-release

      - if: ${{ (contains(fromJson('["ubuntu", "debian"]'), matrix.docker) && matrix.version != 'harmony') }}
        name: Install Bugzilla depencencies
        run: apt -y update && DEBIAN_FRONTEND=noninteractive apt -y install 
               apache2
               git
               build-essential
               mariadb-server
               libcgi-pm-perl
               libdbix-connector-perl
               libdigest-sha-perl
               libtimedate-perl
               libdatetime-perl
               libdatetime-timezone-perl
               libdbi-perl
               libtemplate-perl
               libemail-address-perl
               libemail-sender-perl
               libemail-mime-perl
               liburi-perl
               liblist-moreutils-perl
               libmath-random-isaac-perl
               libjson-xs-perl
               libdbd-mysql-perl
               libgd-perl
               libchart-perl
               libtemplate-plugin-gd-perl
               libgd-text-perl
               libgd-graph-perl
               libmime-tools-perl
               libwww-perl
               libxml-twig-perl
               libnet-ldap-perl
               libauthen-sasl-perl
               libnet-smtp-ssl-perl
               libauthen-radius-perl
               libsoap-lite-perl
               libxmlrpc-lite-perl
               libjson-rpc-perl
               libtest-taint-perl
               libhtml-parser-perl
               libhtml-scrubber-perl
               libencode-perl
               libencode-detect-perl
               libemail-reply-perl
               libhtml-formattext-withlinks-perl
               libtheschwartz-perl
               libdaemon-generic-perl
               libapache2-mod-perl2
               libapache2-mod-perl2-dev
               libfile-mimeinfo-perl
               libio-stringy-perl
               libcache-memcached-perl
               libfile-copy-recursive-perl
               libfile-which-perl

      - if: ${{ (contains(fromJson('["ubuntu", "debian"]'), matrix.docker) && matrix.version == 'harmony' ) }}
        name: Install Bugzilla depencencies
        run: apt -y update && DEBIAN_FRONTEND=noninteractive apt -y install 
               apache2
               git
               build-essential
               mariadb-server
               cpanminus

      - if: ${{ ((contains(matrix.docker, 'fedora') || contains(matrix.docker, 'redhat') || contains(matrix.docker, 'centos'))  && matrix.version != 'harmony' ) }}
        name: Install Bugzilla depencencies
        run: dnf -y install
               httpd
               git
               mariadb-server
               mod_perl
               mod_perl-devel
               httpd-devel
               mariadb-devel
               gcc
               'perl(autodie)'
               'perl(CGI)'
               'perl(Date::Format)'
               'perl(DateTime)'
               'perl(DateTime::TimeZone)'
               'perl(DBI)'
               'perl(DBD::mysql)'
               'perl(DBIx::Connector)'
               'perl(Digest::SHA)'
               'perl(Email::MIME)'
               'perl(Email::Sender)'
               'perl(fields)'
               'perl(JSON::XS)'
               'perl(List::MoreUtils)'
               'perl(Math::Random::ISAAC)'
               'perl(Memoize)'
               'perl(Safe)'
               'perl(Template)'
               'perl(URI)'
               gd-devel
               graphviz
               patchutils
               'perl(Apache2::SizeLimit)'
               'perl(Authen::Radius)'
               'perl(Authen::SASL)'
               'perl(Cache::Memcached)'
               'perl(Encode)'
               'perl(Encode::Detect)'
               'perl(File::Copy::Recursive)'
               'perl(File::MimeInfo::Magic)'
               'perl(File::Which)'
               'perl(GD)'
               'perl(GD::Graph)'
               'perl(GD::Text)'
               'perl(HTML::Parser)'
               'perl(HTML::Scrubber)'
               'perl(IO::Scalar)'
               'perl(JSON::RPC)'
               'perl(LWP::UserAgent)'
               'perl(MIME::Parser)'
               'perl(mod_perl2)'
               'perl(Net::LDAP)'
               'perl(Net::SMTP::SSL)'
               'perl(SOAP::Lite)'
               'perl(Test::Taint)'
               'perl(XMLRPC::Lite)'
               'perl(XML::Twig)'

      - if: ${{ (contains(matrix.docker, 'fedora') && matrix.version == 'harmony' ) }}
        name: Install Harmony depencencies
        run: dnf -y install
               httpd
               git
               mariadb-server
               mod_perl
               mod_perl-devel
               httpd-devel
               mariadb-devel
               gcc
               gd-devel
               graphviz
               patchutils
               cpanminus
               'perl(DateTime::Format::MySQL)'
               'perl(Throwable)'
               'perl(Test::WWW::Selenium)'
               'perl(Test2::V0)'
               'perl(Crypt::CBC)'
               'perl(DateTime)'
               'perl(Crypt::SMIME)'
               'perl(Text::CSV_XS)'
               'perl(Role::Tiny)'
               'perl(Test::Perl::Critic::Progressive)'
               'perl(Class::XSAccessor)'
               'perl(Math::Random::ISAAC)'
               'perl(JSON::MaybeXS)'
               'perl(LWP::UserAgent::Determined)'
               'perl(Scope::Guard)'
               'perl(CGI::Compile)'
               'perl(Pod::Coverage::TrustPod)'
               'perl(JSON::Validator)'
               'perl(Algorithm::BloomFilter)'
               'perl(HTML::Escape)'
               'perl(Capture::Tiny)'
               'perl(DBD::SQLite)'
               'perl(Tie::IxHash)'
               'perl(DBIx::Connector)'
               'perl(Bytes::Random::Secure)'
               'perl(URI::Escape::XS)'
               'perl(EV)'
               'perl(Type::Tiny)'
               'perl(Future)'
               'perl(DBIx::Class::Helpers)'
               'perl(Log::Dispatch)'
               'perl(Perl::Tidy)'
               'perl(Devel::NYTProf)'
               'perl(Package::Stash)'
               'perl(Net::DNS)'
               'perl(Test::Taint)'
               'perl(DateTime::Format::SQLite)'
               'perl(Mojo::JWT)'
               'perl(PerlX::Maybe)'
               'perl(IO::Async)'
               'perl(FFI::Platypus)'
               'perl(Regexp::Common)'
               'perl(CGI::Emulate::PSGI)'
               'perl(MojoX::Log::Log4perl)'
               'perl(Test::Pod)'
               'perl(MooX::StrictConstructor)'
               'perl(Log::Log4perl)'
               'perl(Crypt::DES_EDE3)'
               'perl(JSON::RPC)'
               'perl(LWP::Protocol::https)'
               'perl(DBD::mysql)'
               'perl(Sereal)'
               'perl(Mojolicious)'
               'perl(XMLRPC::Lite)'
               'perl(Sub::Quote)'
               'perl(SOAP::Lite)'
               'perl(Pod::Coverage)'
               'perl(Moo)'
               'perl(JSON::XS)'
               'perl(Test::CPAN::Meta)'
               'perl(Crypt::DES)'
               'perl(DBIx::Class)'
               'perl(Email::Send)'
               'perl(File::MimeInfo::Magic)'
               'perl(Test::Pod::Coverage)'
               'perl(DateTime::TimeZone)'
               'perl(Test-Warnings)'
               'perl(Test-Needs)'
               'perl(Test-RequiresInternet)'
               'perl(Test-LWP-UserAgent)'
               'perl(Test-LongString)'
               'perl(SUPER)'
               'perl(Test-MockModule)'
               'perl(Selenium-Remote-Driver)'
               'perl(File-ShareDir-Install)'
               'perl(Test-Requires)'
               'perl(Test-SharedFork)'
               'perl(Test-TCP)'
               'perl(Plack)'
               'perl(JSON-RPC)'
               'perl(ExtUtils-Config)'
               'perl(ExtUtils-InstallPaths)'
               'perl(ExtUtils-Helpers)'
               'perl(Module-Build-Tiny)'
               'perl(Perl-Critic-Policy)'
               'perl(Pod-MinimumVersion)'
               'perl(Perl-Critic-Pulp)'
               'perl(Mojolicious-Plugin-ForwardedFor)'
               'perl(Crypt-RIPEMD160)'
               'perl(Crypt-Twofish)'
               'perl(Data-Buffer)'
               'perl(Crypt-DSA)'
               'perl(Crypt-Blowfish)'
               'perl(Sub-Uplevel)'
               'perl(Test-Exception)'
               'perl(Crypt-CAST5_PP)'
               'perl(Crypt-IDEA)'
               'perl(Tie-EncryptedHash)'
               'perl(Digest-MD2)'
               'perl(Class-Loader)'
               'perl(Convert-ASCII-Armour)'
               'perl(Sort)'
               'perl(Math-Prime-Util)'
               'perl(Alt-Crypt-RSA-BigInt)'
               'perl(Crypt-Rijndael)'
               'perl(Crypt-OpenPGP)'
               'perl(Perl-Critic)'

      - if: ${{ contains(matrix.docker, 'fedora') }}
        name: Install extra optional Bugzilla depencencies
        run: dnf -y install
               'perl(Chart::Lines)'
               'perl(Daemon::Generic)'
               'perl(Email::Reply)'
               'perl(HTML::FormatText::WithLinks)'
               'perl(PatchReader)'
               'perl(Template::Plugin::GD::Image)'
               'perl(TheSchwartz)'

      - if: ${{ ( matrix.version && contains(fromJson('["ubuntu", "debian"]'), matrix.docker) ) }}
        name: Install Apache config
        run: |
            cat << EOF >> /etc/apache2/sites-available/bugzilla.conf
               <Directory /var/www/html/bugzilla>
                 AddHandler cgi-script .cgi
                 Options +ExecCGI +FollowSymLinks
                 DirectoryIndex index.cgi index.html
                 AllowOverride All
               </Directory>
            EOF

      - if: ${{ ( matrix.version && (contains(matrix.docker, 'fedora') || contains(matrix.docker, 'redhat') || contains(matrix.docker, 'centos') ) ) }}
        name: Install Apache config
        run: |
            cat << EOF >> /etc/httpd/conf/httpd.conf
               <Directory /var/www/html/bugzilla>
                 AddHandler cgi-script .cgi
                 Options +ExecCGI +FollowSymLinks
                 DirectoryIndex index.cgi index.html
                 AllowOverride All
               </Directory>
            EOF

      - if: ${{ contains(fromJson('["ubuntu", "debian"]'), matrix.docker) }}
        name: Enable apache modules
        run: a2enmod cgi headers expires rewrite

      - if: ${{ contains(fromJson('["ubuntu", "debian"]'), matrix.docker) }}
        name: Add the bugzilla site
        run: a2ensite bugzilla

      - if: ${{ contains(fromJson('["ubuntu", "debian"]'), matrix.docker) }}
        name: Start and run Apache in the background
        run: apachectl start

      - if: ${{ (contains(matrix.docker, 'fedora') || contains(matrix.docker, 'redhat') || contains(matrix.docker, 'centos') ) }}
        name: Start and run Apache in the background
        run: httpd

      - if: ${{ ( contains(matrix.docker, 'fedora')|| contains(matrix.docker, 'redhat') || contains(matrix.docker, 'centos') ) }}
        name: Prepare the database
        run: su -c "/usr/bin/mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql; /usr/bin/mariadbd-safe --port 3307 --skip-syslog &" -s /bin/sh mysql

      - if: ${{ contains(fromJson('["ubuntu", "debian"]'), matrix.docker) }}
        name: Prepare the database
        run: su -c "mariadbd-safe --port 3307 --skip-syslog &" -s /bin/sh root

      - name: Create bugs user with password
        run: |
          while( ! mysqladmin ping ); do sleep 1; date; done
          mysql -u root -e "GRANT ALL PRIVILEGES ON bugs.* TO bugs@localhost IDENTIFIED BY '4ab75f1f4874be5c'"

      - if: ${{ contains(matrix.version, '5.2') }}
        name: Create database bugs
        run: mysql -u bugs -p'4ab75f1f4874be5c' -e "CREATE DATABASE bugs CHARACTER SET = 'utf8'"

      - if: ${{ matrix.version != 'harmony' }}
        name: Clone Bugzilla ${{ matrix.version }}
        run: ${{ format('git clone --branch {0} https://github.com/bugzilla/bugzilla {1}', matrix.version, matrix.root) }}

      - if: ${{ matrix.version == 'harmony' }}
        name: Clone Bugzilla ${{ matrix.version }}
        run: ${{ format('git clone https://github.com/bugzilla/harmony {1}', matrix.version, matrix.root) }}

      - if: ${{ matrix.version == 'harmony' }}
        name: Install additional dependencies
        run: cd ${{ matrix.root }} && cpanm --installdeps .

      - name: Create config
        run: cd ${{ matrix.root }} && ./checksetup.pl

      - name: Set db password
        run: ${{ format('sed -i "s/db_pass.*/db_pass=\"4ab75f1f4874be5c\";/g" {0}/localconfig', matrix.root) }}

      - if: ${{ contains(fromJson('["ubuntu", "debian"]'), matrix.docker) }}
        name: Set web server group config
        run: ${{ format('sed -i "s/webservergroup.*/webservergroup=\"www-data\";/g" {0}/localconfig', matrix.root) }}

      - if: ${{ ( contains(matrix.docker, 'fedora') || contains(matrix.docker, 'redhat') || contains(matrix.docker, 'centos') ) }}
        name: Set web server group config
        run: ${{ format('sed -i "s/webservergroup.*/webservergroup=\"apache\";/g" {0}/localconfig', matrix.root) }}

      - name: Non interactive config setup
        run: |
            cat << EOF >> ${{ matrix.root }}.setup
            \$answer{'ADMIN_EMAIL'} = 'test@bugzilla.org';
            \$answer{'ADMIN_PASSWORD'} = 'test1234';
            \$answer{'ADMIN_REALNAME'} = 'Test McTestface';
            \$answer{'NO_PAUSE'} = 1
            EOF

      - name: Check config
        run: cd ${{ matrix.root }} && ./checksetup.pl .setup

      - name: Test server
        run: cd ${{ matrix.root }} && ./testserver.pl http://localhost/bugzilla
